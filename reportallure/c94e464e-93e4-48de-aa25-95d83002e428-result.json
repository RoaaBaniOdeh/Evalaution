{"name": "test_create_evaluation", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=121.0.6167.185)\nStacktrace:\n\tGetHandleVerifier [0x00CA6EE3+174339]\n\t(No symbol) [0x00BD0A51]\n\t(No symbol) [0x008E6FF6]\n\t(No symbol) [0x008CEFE7]\n\t(No symbol) [0x0093B53B]\n\t(No symbol) [0x00949E7B]\n\t(No symbol) [0x00936DA6]\n\t(No symbol) [0x00911034]\n\t(No symbol) [0x00911F8D]\n\tGetHandleVerifier [0x00D44B1C+820540]\n\tsqlite3_dbdata_init [0x00E053EE+653550]\n\tsqlite3_dbdata_init [0x00E04E09+652041]\n\tsqlite3_dbdata_init [0x00DF97CC+605388]\n\tsqlite3_dbdata_init [0x00E05D9B+656027]\n\t(No symbol) [0x00BDFE6C]\n\t(No symbol) [0x00BD83B8]\n\t(No symbol) [0x00BD84DD]\n\t(No symbol) [0x00BC5818]\n\tBaseThreadInitThunk [0x76427BA9+25]\n\tRtlInitializeExceptionChain [0x7702BD2B+107]\n\tRtlClearBits [0x7702BCAF+191]", "trace": "self = <test_evaluation.TestEvaluation object at 0x00000256054CAC30>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1db93603bb4373f84653abddf81d9000\")>\n\n    def test_create_evaluation(self, driver):\n        login_page = LoginPage(driver)\n>       login_page.log_in(LoginTestData.VALID_USERNAME_HR, LoginTestData.VALID_PASSWORD)\n\ntests\\test_evaluation.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:10: in log_in\n    self.wait_for(LoginPageLocators.USERNAME_INPUT).send_keys(username)\npages\\base.py:12: in wait_for\n    return self.wait.until(EC.presence_of_element_located(locator))\nC:\\Evaluation\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nC:\\Evaluation\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:84: in _predicate\n    return driver.find_element(*locator)\nC:\\Evaluation\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Evaluation\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000256054D1F10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x76427BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7702BD2B+107]\\\\n\\\\tRtlClearBits [0x7702BCAF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=121.0.6167.185)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00CA6EE3+174339]\nE       \t(No symbol) [0x00BD0A51]\nE       \t(No symbol) [0x008E6FF6]\nE       \t(No symbol) [0x008CEFE7]\nE       \t(No symbol) [0x0093B53B]\nE       \t(No symbol) [0x00949E7B]\nE       \t(No symbol) [0x00936DA6]\nE       \t(No symbol) [0x00911034]\nE       \t(No symbol) [0x00911F8D]\nE       \tGetHandleVerifier [0x00D44B1C+820540]\nE       \tsqlite3_dbdata_init [0x00E053EE+653550]\nE       \tsqlite3_dbdata_init [0x00E04E09+652041]\nE       \tsqlite3_dbdata_init [0x00DF97CC+605388]\nE       \tsqlite3_dbdata_init [0x00E05D9B+656027]\nE       \t(No symbol) [0x00BDFE6C]\nE       \t(No symbol) [0x00BD83B8]\nE       \t(No symbol) [0x00BD84DD]\nE       \t(No symbol) [0x00BC5818]\nE       \tBaseThreadInitThunk [0x76427BA9+25]\nE       \tRtlInitializeExceptionChain [0x7702BD2B+107]\nE       \tRtlClearBits [0x7702BCAF+191]\n\nC:\\Evaluation\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "f1f80265-57dc-4e09-a29d-3a84dbba62be-attachment.txt", "type": "text/plain"}], "start": 1708520924080, "stop": 1708520924085, "uuid": "5d81eeac-28b8-46d1-8e62-00b9b2fb9a2c", "historyId": "8dad31f53517a4dc55613121696d6051", "testCaseId": "8dad31f53517a4dc55613121696d6051", "fullName": "tests.test_evaluation.TestEvaluation#test_create_evaluation", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_evaluation"}, {"name": "subSuite", "value": "TestEvaluation"}, {"name": "host", "value": "Roaa"}, {"name": "thread", "value": "9792-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_evaluation"}]}